---
swagger: "2.0"
info:
  description: "Open Source Search Graph (GraphQL/RESTful/P2P)"
  version: "0.22.17"
  title: "Weaviate"
  contact:
    name: "Weaviate"
    url: "https://github.com/semi-technologies"
    email: "hello@semi.technology"
basePath: "/v1"
tags:
- name: "actions"
- name: "batching"
  description: "These operations allow to execute batch requests for Things and Actions.\
    \ Mostly used for importing large datasets."
- name: "graphql"
- name: "meta"
- name: "P2P"
- name: "things"
- name: "contextionary-API"
  description: "All functions related to the Contextionary."
- name: "schema"
  description: "These operations enable manipulation of the schema in Weaviate schema."
schemes:
- "https"
consumes:
- "application/yaml"
- "application/json"
produces:
- "application/json"
security:
- {}
- oidc: []
paths:
  /:
    get:
      description: "Home. Discover the REST API"
      operationId: "weaviate.root"
      parameters: []
      responses:
        "200":
          description: "Weaviate is alive and ready to serve content"
          schema:
            $ref: "#/definitions/inline_response_200"
  /.well-known/live:
    get:
      description: "Determines whether the application is alive. Can be used for kubernetes\
        \ liveness probe"
      operationId: "weaviate.wellknown.liveness"
      parameters: []
      responses:
        "200":
          description: "The application is able to respond to HTTP requests"
  /.well-known/ready:
    get:
      description: "Determines whether the application is ready to receive traffic.\
        \ Can be used for kubernetes readiness probe."
      operationId: "weaviate.wellknown.readiness"
      parameters: []
      responses:
        "200":
          description: "The application has completed its start-up routine and is\
            \ ready to accept traffic."
        "503":
          description: "The application is currently not able to serve traffic. If\
            \ other horizontal replicas of weaviate are available and they are capable\
            \ of receving traffic, all traffic should be redirected there instead."
  /actions:
    get:
      tags:
      - "actions"
      summary: "Get a list of Actions."
      description: "Lists all Actions in reverse order of creation, owned by the user\
        \ that belongs to the used token."
      operationId: "actions.list"
      parameters:
      - name: "limit"
        in: "query"
        description: "The maximum number of items to be returned per page. Default\
          \ value is set in Weaviate config."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "meta"
        in: "query"
        description: "Should additional meta information (e.g. about classified properties)\
          \ be included? Defaults to false."
        required: false
        type: "boolean"
        x-exportParamName: "Meta"
        x-optionalDataType: "Bool"
      - name: "include"
        in: "query"
        description: "Include additional information, such as classification infos.\
          \ Allowed values include: classification, _classification, vector, _vector,\
          \ interpretation, _interpretation"
        required: false
        type: "string"
        x-exportParamName: "Include"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful response."
          schema:
            $ref: "#/definitions/ActionsListResponse"
        "400":
          description: "Malformed request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Successful query result but no resource was found."
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.query"
      x-available-in-mqtt: false
      x-available-in-websocket: false
    post:
      tags:
      - "actions"
      summary: "Create Actions between two Things (object and subject)."
      description: "Registers a new Action. Provided meta-data and schema values are\
        \ validated."
      operationId: "actions.create"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Action"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Action created."
          schema:
            $ref: "#/definitions/Action"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the class is defined in the\
            \ configuration file?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.add"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /actions/validate:
    post:
      tags:
      - "actions"
      summary: "Validate an Action based on a schema."
      description: "Validate an Action's schema and meta-data. It has to be based\
        \ on a schema, which is related to the given Action to be accepted by this\
        \ validation."
      operationId: "actions.validate"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Action"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successfully validated."
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the class is defined in the\
            \ configuration file?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.query.meta"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /actions/{id}:
    get:
      tags:
      - "actions"
      summary: "Get a specific Action based on its UUID and a Thing UUID. Also available\
        \ as Websocket bus."
      description: "Lists Actions."
      operationId: "actions.get"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Action."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      - name: "meta"
        in: "query"
        description: "Should additional meta information (e.g. about classified properties)\
          \ be included? Defaults to false."
        required: false
        type: "boolean"
        x-exportParamName: "Meta"
        x-optionalDataType: "Bool"
      - name: "include"
        in: "query"
        description: "Include additional information, such as classification infos.\
          \ Allowed values include: classification, _classification, vector, _vector,\
          \ interpretation, _interpretation"
        required: false
        type: "string"
        x-exportParamName: "Include"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful response."
          schema:
            $ref: "#/definitions/Action"
        "400":
          description: "Malformed request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Successful query result but no resource was found."
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.query"
      x-available-in-mqtt: false
      x-available-in-websocket: false
    put:
      tags:
      - "actions"
      summary: "Update an Action based on its UUID."
      description: "Updates an Action's data. Given meta-data and schema values are\
        \ validated. LastUpdateTime is set to the time this function is called."
      operationId: "actions.update"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Action."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Action"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successfully received."
          schema:
            $ref: "#/definitions/Action"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Successful query result but no resource was found."
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the class is defined in the\
            \ configuration file?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate"
      x-available-in-mqtt: false
      x-available-in-websocket: false
    delete:
      tags:
      - "actions"
      summary: "Delete an Action based on its UUID."
      description: "Deletes an Action from the system."
      operationId: "actions.delete"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Thing."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      responses:
        "204":
          description: "Successfully deleted."
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Successful query result but no resource was found."
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate"
      x-available-in-mqtt: true
      x-available-in-websocket: true
    patch:
      tags:
      - "actions"
      summary: "Update an Action based on its UUID (using patch semantics)."
      description: "Updates an Action. This method supports json-merge style patch\
        \ semantics (RFC 7396). Provided meta-data and schema values are validated.\
        \ LastUpdateTime is set to the time this function is called."
      operationId: "actions.patch"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Action."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "RFC 7396-style patch, the body contains the action object to\
          \ merge into the existing action object."
        required: false
        schema:
          $ref: "#/definitions/Action"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Successfully applied. No content provided."
        "400":
          description: "The patch-JSON is malformed."
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Successful query result but no resource was found."
        "422":
          description: "The patch-JSON is valid but unprocessable."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /actions/{id}/references/{propertyName}:
    post:
      tags:
      - "actions"
      summary: "Add a single reference to a class-property."
      description: "Add a single reference to a class-property."
      operationId: "actions.references.create"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Action."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      - name: "propertyName"
        in: "path"
        description: "Unique name of the property related to the Action."
        required: true
        type: "string"
        x-exportParamName: "PropertyName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SingleRef"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successfully added the reference."
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the property exists or that\
            \ it is a class?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate"
      x-available-in-mqtt: false
      x-available-in-websocket: false
    put:
      tags:
      - "actions"
      summary: "Replace all references to a class-property."
      description: "Replace all references to a class-property."
      operationId: "actions.references.update"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Action."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      - name: "propertyName"
        in: "path"
        description: "Unique name of the property related to the Action."
        required: true
        type: "string"
        x-exportParamName: "PropertyName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MultipleRef"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successfully replaced all the references."
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the property exists or that\
            \ it is a class?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate"
      x-available-in-mqtt: false
      x-available-in-websocket: false
    delete:
      tags:
      - "actions"
      summary: "Delete the single reference that is given in the body from the list\
        \ of references that this property has."
      description: "Delete the single reference that is given in the body from the\
        \ list of references that this property has."
      operationId: "actions.references.delete"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Action."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      - name: "propertyName"
        in: "path"
        description: "Unique name of the property related to the Action."
        required: true
        type: "string"
        x-exportParamName: "PropertyName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SingleRef"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Successfully deleted."
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Successful query result but no resource was found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /batching/things:
    post:
      tags:
      - "batching"
      - "things"
      summary: "Creates new Things based on a Thing template as a batch."
      description: "Register new Things in bulk. Provided meta-data and schema values\
        \ are validated."
      operationId: "batching.things.create"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Request succeeded, see response body to get detailed information\
            \ about each batched item."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ThingsGetResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the class is defined in the\
            \ configuration file?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.add"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /batching/actions:
    post:
      tags:
      - "batching"
      - "actions"
      summary: "Creates new Actions based on an Action template as a batch."
      description: "Register new Actions in bulk. Given meta-data and schema values\
        \ are validated."
      operationId: "batching.actions.create"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_1"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Request succeeded, see response body to get detailed information\
            \ about each batched item."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ActionsGetResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the class is defined in the\
            \ configuration file?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.add"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /batching/references:
    post:
      tags:
      - "batching"
      - "references"
      summary: "Creates new Cross-References between arbitrary classes in bulk."
      description: "Register cross-references between any class items (things or actions)\
        \ in bulk."
      operationId: "batching.references.create"
      parameters:
      - in: "body"
        name: "body"
        description: "A list of references to be batched. The ideal size depends on\
          \ the used database connector. Please see the documentation of the used\
          \ connector for help"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/BatchReference"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Request Successful. Warning: A successful request does not\
            \ guarantuee that every batched reference was successfully created. Inspect\
            \ the response body to see which references succeeded and which failed."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BatchReferenceResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the class is defined in the\
            \ configuration file?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.add"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /graphql:
    post:
      tags:
      - "graphql"
      summary: "Get a response based on GraphQL"
      description: "Get an object based on GraphQL"
      operationId: "graphql.post"
      parameters:
      - in: "body"
        name: "body"
        description: "The GraphQL query request parameters."
        required: true
        schema:
          $ref: "#/definitions/GraphQLQuery"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successful query (with select)."
          schema:
            $ref: "#/definitions/GraphQLResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the class is defined in the\
            \ configuration file?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.query"
      - "weaviate.local.query.meta"
      - "weaviate.network.query"
      - "weaviate.network.query.meta"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /graphql/batch:
    post:
      tags:
      - "graphql"
      summary: "Get a response based on GraphQL."
      description: "Perform a batched GraphQL query"
      operationId: "graphql.batch"
      parameters:
      - in: "body"
        name: "body"
        description: "The GraphQL queries."
        required: true
        schema:
          $ref: "#/definitions/GraphQLQueries"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successful query (with select)."
          schema:
            $ref: "#/definitions/GraphQLResponses"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the class is defined in the\
            \ configuration file?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.query"
      - "weaviate.local.query.meta"
      - "weaviate.network.query"
      - "weaviate.network.query.meta"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /meta:
    get:
      tags:
      - "meta"
      summary: "Returns meta information of the current Weaviate instance."
      description: "Gives meta information about the server and can be used to provide\
        \ information to another Weaviate instance that wants to interact with the\
        \ current instance."
      operationId: "meta.get"
      parameters: []
      responses:
        "200":
          description: "Successful response."
          schema:
            $ref: "#/definitions/Meta"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.query.meta"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /schema:
    get:
      tags:
      - "schema"
      summary: "Dump the current the database schema."
      operationId: "schema.dump"
      parameters: []
      responses:
        "200":
          description: "Successfully dumped the database schema."
          schema:
            $ref: "#/definitions/inline_response_200_1"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.query.meta"
  /schema/actions:
    post:
      tags:
      - "schema"
      summary: "Create a new Action class in the schema."
      operationId: "schema.actions.create"
      parameters:
      - in: "body"
        name: "actionClass"
        required: true
        schema:
          $ref: "#/definitions/Class"
        x-exportParamName: "ActionClass"
      responses:
        "200":
          description: "Added the new Action class to the schema."
          schema:
            $ref: "#/definitions/Class"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Invalid Action class"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.add.meta"
  /schema/actions/{className}:
    delete:
      tags:
      - "schema"
      summary: "Remove an Action class (and all data in the instances) from the schema."
      operationId: "schema.actions.delete"
      parameters:
      - name: "className"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ClassName"
      responses:
        "200":
          description: "Removed the Action class from the schema."
        "400":
          description: "Could not delete the Action class."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate.meta"
  /schema/actions/{className}/properties:
    post:
      tags:
      - "schema"
      summary: "Add a property to an Action class."
      operationId: "schema.actions.properties.add"
      parameters:
      - name: "className"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ClassName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Property"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Added the property."
          schema:
            $ref: "#/definitions/Property"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Invalid property."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate.meta"
  /schema/things:
    post:
      tags:
      - "schema"
      summary: "Create a new Thing class in the schema."
      operationId: "schema.things.create"
      parameters:
      - in: "body"
        name: "thingClass"
        required: true
        schema:
          $ref: "#/definitions/Class"
        x-exportParamName: "ThingClass"
      responses:
        "200":
          description: "Added the new Thing class to the schema."
          schema:
            $ref: "#/definitions/Class"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Invalid Thing class."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.add.meta"
  /schema/things/{className}:
    delete:
      tags:
      - "schema"
      summary: "Remove a Thing class (and all data in the instances) from the schema."
      operationId: "schema.things.delete"
      parameters:
      - name: "className"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ClassName"
      responses:
        "200":
          description: "Removed the Thing class from the schema."
        "400":
          description: "Could not delete the Thing class."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate.meta"
  /schema/things/{className}/properties:
    post:
      tags:
      - "schema"
      summary: "Add a property to a Thing class."
      operationId: "schema.things.properties.add"
      parameters:
      - name: "className"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ClassName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Property"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Added the property."
          schema:
            $ref: "#/definitions/Property"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Invalid property."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate.meta"
  /things:
    get:
      tags:
      - "things"
      summary: "Get a list of Things."
      description: "Lists all Things in reverse order of creation, owned by the user\
        \ that belongs to the used token."
      operationId: "things.list"
      parameters:
      - name: "limit"
        in: "query"
        description: "The maximum number of items to be returned per page. Default\
          \ value is set in Weaviate config."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "meta"
        in: "query"
        description: "Should additional meta information (e.g. about classified properties)\
          \ be included? Defaults to false."
        required: false
        type: "boolean"
        x-exportParamName: "Meta"
        x-optionalDataType: "Bool"
      - name: "include"
        in: "query"
        description: "Include additional information, such as classification infos.\
          \ Allowed values include: classification, _classification, vector, _vector,\
          \ interpretation, _interpretation"
        required: false
        type: "string"
        x-exportParamName: "Include"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful response."
          schema:
            $ref: "#/definitions/ThingsListResponse"
        "400":
          description: "Malformed request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Successful query result but no resource was found."
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.query"
      x-available-in-mqtt: false
      x-available-in-websocket: false
    post:
      tags:
      - "things"
      summary: "Create a new Thing based on a Thing template."
      description: "Registers a new Thing. Given meta-data and schema values are validated."
      operationId: "things.create"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Thing"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Thing created."
          schema:
            $ref: "#/definitions/Thing"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the class is defined in the\
            \ configuration file?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.add"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /things/validate:
    post:
      tags:
      - "things"
      summary: "Validate Things schema."
      description: "Validate a Thing's schema and meta-data. It has to be based on\
        \ a schema, which is related to the given Thing to be accepted by this validation."
      operationId: "things.validate"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Thing"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successfully validated."
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the class is defined in the\
            \ configuration file?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.query.meta"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /things/{id}:
    get:
      tags:
      - "things"
      summary: "Get a Thing based on its UUID."
      description: "Returns a particular Thing data."
      operationId: "things.get"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Thing."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      - name: "meta"
        in: "query"
        description: "Should additional meta information (e.g. about classified properties)\
          \ be included? Defaults to false."
        required: false
        type: "boolean"
        x-exportParamName: "Meta"
        x-optionalDataType: "Bool"
      - name: "include"
        in: "query"
        description: "Include additional information, such as classification infos.\
          \ Allowed values include: classification, _classification, vector, _vector,\
          \ interpretation, _interpretation"
        required: false
        type: "string"
        x-exportParamName: "Include"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful response."
          schema:
            $ref: "#/definitions/Thing"
        "400":
          description: "Malformed request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Successful query result but no resource was found."
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.query"
      x-available-in-mqtt: false
      x-available-in-websocket: false
    put:
      tags:
      - "things"
      summary: "Update a Thing based on its UUID."
      description: "Updates a Thing's data. Given meta-data and schema values are\
        \ validated. LastUpdateTime is set to the time this function is called."
      operationId: "things.update"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Thing."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Thing"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successfully received."
          schema:
            $ref: "#/definitions/Thing"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Successful query result but no resource was found."
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the class is defined in the\
            \ configuration file?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate"
      x-available-in-mqtt: false
      x-available-in-websocket: false
    delete:
      tags:
      - "things"
      summary: "Delete a Thing based on its UUID."
      description: "Deletes a Thing from the system. All Actions pointing to this\
        \ Thing, where the Thing is the object of the Action, are also being deleted."
      operationId: "things.delete"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Thing."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      responses:
        "204":
          description: "Successfully deleted."
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Successful query result but no resource was found."
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate"
      x-available-in-mqtt: true
      x-available-in-websocket: true
    patch:
      tags:
      - "things"
      summary: "Update a Thing based on its UUID (using patch semantics)."
      description: "Updates a Thing's data. This method supports patch semantics.\
        \ Given meta-data and schema values are validated. LastUpdateTime is set to\
        \ the time this function is called."
      operationId: "things.patch"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Thing."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "RFC 7396-style patch, the body contains the thing object to\
          \ merge into the existing thing object."
        required: false
        schema:
          $ref: "#/definitions/Thing"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Successfully applied. No content returned"
        "400":
          description: "The patch-JSON is malformed."
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Successful query result but no resource was found."
        "422":
          description: "The patch-JSON is valid but unprocessable."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /things/{id}/references/{propertyName}:
    post:
      tags:
      - "things"
      summary: "Add a single reference to a class-property."
      description: "Add a single reference to a class-property."
      operationId: "things.references.create"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Thing."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      - name: "propertyName"
        in: "path"
        description: "Unique name of the property related to the Thing."
        required: true
        type: "string"
        x-exportParamName: "PropertyName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SingleRef"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successfully added the reference."
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the property exists or that\
            \ it is a class?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate"
      x-available-in-mqtt: false
      x-available-in-websocket: false
    put:
      tags:
      - "things"
      summary: "Replace all references to a class-property."
      description: "Replace all references to a class-property."
      operationId: "things.references.update"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Thing."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      - name: "propertyName"
        in: "path"
        description: "Unique name of the property related to the Thing."
        required: true
        type: "string"
        x-exportParamName: "PropertyName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MultipleRef"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successfully replaced all the references (success is based\
            \ on the behavior of the datastore)."
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous. Are you sure the property exists or that\
            \ it is a class?"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate"
      x-available-in-mqtt: false
      x-available-in-websocket: false
    delete:
      tags:
      - "things"
      summary: "Delete the single reference that is given in the body from the list\
        \ of references that this property has."
      description: "Delete the single reference that is given in the body from the\
        \ list of references that this property has."
      operationId: "things.references.delete"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique ID of the Thing."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "Id"
      - name: "propertyName"
        in: "path"
        description: "Unique name of the property related to the Thing."
        required: true
        type: "string"
        x-exportParamName: "PropertyName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SingleRef"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Successfully deleted."
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Successful query result but no resource was found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.local.manipulate"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /c11y/words/{words}:
    get:
      tags:
      - "contextionary-API"
      summary: "Checks if a word or wordString is part of the contextionary."
      description: "Checks if a word or wordString is part of the contextionary. Words\
        \ should be concatenated as described here: https://github.com/semi-technologies/weaviate/blob/master/docs/en/use/schema-schema.md#camelcase"
      operationId: "c11y.words"
      parameters:
      - name: "words"
        in: "path"
        description: "CamelCase list of words to validate."
        required: true
        type: "string"
        x-exportParamName: "Words"
      responses:
        "200":
          description: "Successful response."
          schema:
            $ref: "#/definitions/C11yWordsResponse"
        "400":
          description: "Incorrect request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "501":
          description: "Not (yet) implemented."
      x-serviceIds:
      - "weaviate.c11y.words.get"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /c11y/concepts/{concept}:
    get:
      tags:
      - "contextionary-API"
      summary: "Checks if a concept is part of the contextionary."
      description: "Checks if a concept is part of the contextionary. Concepts should\
        \ be concatenated as described here: https://github.com/semi-technologies/weaviate/blob/master/docs/en/use/schema-schema.md#camelcase"
      operationId: "c11y.concepts"
      parameters:
      - name: "concept"
        in: "path"
        description: "CamelCase list of words to validate."
        required: true
        type: "string"
        x-exportParamName: "Concept"
      responses:
        "200":
          description: "Successful response."
          schema:
            $ref: "#/definitions/C11yWordsResponse"
        "400":
          description: "Incorrect request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "501":
          description: "Not (yet) implemented."
      x-serviceIds:
      - "weaviate.c11y.words.get"
  /c11y/extensions/:
    post:
      tags:
      - "contextionary-API"
      summary: "Extend the contextionary with custom concepts"
      description: "Extend the contextionary with your own custom concepts"
      operationId: "c11y.extensions"
      parameters:
      - in: "body"
        name: "extension"
        description: "Description and definition of the concept to extend the contextionary\
          \ with"
        required: true
        schema:
          $ref: "#/definitions/C11yExtension"
        x-exportParamName: "Extension"
      responses:
        "200":
          description: "Successfully extended the contextionary with the custom cocnept"
          schema:
            $ref: "#/definitions/C11yExtension"
        "400":
          description: "Incorrect request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "501":
          description: "Not (yet) implemented."
      x-serviceIds:
      - "weaviate.extensions.post"
  /c11y/corpus:
    post:
      tags:
      - "contextionary-API"
      summary: "Checks if a word or wordString is part of the contextionary."
      description: "Analyzes a sentence based on the contextionary"
      operationId: "c11y.corpus.get"
      parameters:
      - in: "body"
        name: "corpus"
        description: "A text corpus"
        required: true
        schema:
          $ref: "#/definitions/corpus"
        x-exportParamName: "Corpus"
      responses:
        "501":
          description: "Not (yet) implemented."
      x-serviceIds:
      - "weaviate.c11y.corpus.get"
      x-available-in-mqtt: false
      x-available-in-websocket: false
  /classifications/:
    post:
      tags:
      - "classifications"
      summary: "Starts a classification."
      description: "Trigger a classification based on the specified params. Classifications\
        \ will run in the background, use GET /classifications/<id> to retrieve the\
        \ status of your classificaiton."
      operationId: "classifications.post"
      parameters:
      - in: "body"
        name: "params"
        description: "parameters to start a classification"
        required: true
        schema:
          $ref: "#/definitions/Classification"
        x-exportParamName: "Params"
      responses:
        "201":
          description: "Successfully started classification."
          schema:
            $ref: "#/definitions/Classification"
        "400":
          description: "Incorrect request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.classifications.post"
  /classifications/{id}:
    get:
      tags:
      - "classifications"
      summary: "View previously created classification"
      description: "Get status, results and metadata of a previously created classification"
      operationId: "classifications.get"
      parameters:
      - name: "id"
        in: "path"
        description: "classification id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Found the classification, returned as body"
          schema:
            $ref: "#/definitions/Classification"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Not Found - Classification does not exist"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-serviceIds:
      - "weaviate.classifications.get"
  /.well-known/openid-configuration:
    get:
      tags:
      - "well-known"
      - "oidc"
      - "discovery"
      summary: "OIDC discovery information if OIDC auth is enabled"
      description: "OIDC Discovery page, redirects to the token issuer if one is configured"
      parameters: []
      responses:
        "200":
          description: "Successful response, inspect body"
          schema:
            $ref: "#/definitions/inline_response_200_2"
        "404":
          description: "Not found, no oidc provider present"
      x-available-in-mqtt: false
      x-available-in-websocket: false
securityDefinitions:
  oidc:
    description: "OIDC (OpenConnect ID - based on OAuth2)"
    type: "oauth2"
    authorizationUrl: "http://to-be-configured-in-the-application-config"
    flow: "implicit"
definitions:
  Link:
    type: "object"
    properties:
      href:
        type: "string"
        description: "target of the link"
      rel:
        type: "string"
        description: "relationship if both resources are related, e.g. 'next', 'previous',\
          \ 'parent', etc."
      name:
        type: "string"
        description: "human readable name of the resource group"
      documentationHref:
        type: "string"
        description: "weaviate documentation about this resource group"
    example:
      rel: "rel"
      name: "name"
      documentationHref: "documentationHref"
      href: "href"
  Principal:
    type: "object"
    properties:
      username:
        type: "string"
        description: "The username that was extracted either from the authentication\
          \ information"
      groups:
        type: "array"
        items:
          type: "string"
  Action:
    type: "object"
    properties:
      class:
        type: "string"
        description: "Type of the Action, defined in the schema."
      vectorWeights:
        $ref: "#/definitions/VectorWeights"
      schema:
        $ref: "#/definitions/PropertySchema"
      meta:
        $ref: "#/definitions/UnderscoreProperties"
      id:
        type: "string"
        format: "uuid"
        description: "ID of the Action."
      creationTimeUnix:
        type: "integer"
        format: "int64"
        description: "Timestamp of creation of this Action in milliseconds since epoch\
          \ UTC."
      lastUpdateTimeUnix:
        type: "integer"
        format: "int64"
        description: "Timestamp of the last update made to the Action since epoch\
          \ UTC."
      _classification:
        description: "If this object was subject of a classificiation, additional\
          \ meta info about this classification is available here. (Underscore properties\
          \ are optional, include them using the ?include=_<propName> parameter)"
        $ref: "#/definitions/UnderscorePropertiesClassification"
      _vector:
        description: "This object's position in the Contextionary vector space. (Underscore\
          \ properties are optional, include them using the ?include=_<propName> parameter)"
        $ref: "#/definitions/C11yVector"
      _interpretation:
        description: "Additional information about how this property was interpreted\
          \ at vectorization. (Underscore properties are optional, include them using\
          \ the ?include=_<propName> parameter)"
        $ref: "#/definitions/Interpretation"
      _nearestNeighbors:
        description: "Additional information about the neighboring concepts of this\
          \ element"
        $ref: "#/definitions/NearestNeighbors"
      _featureProjection:
        description: "A feature projection of the object's vector into lower dimensions\
          \ for visualization"
        $ref: "#/definitions/FeatureProjection"
    example:
      schema: {}
      _classification:
        classifiedFields:
        - "classifiedFields"
        - "classifiedFields"
        scope:
        - "scope"
        - "scope"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        completed: "2000-01-23T04:56:07.000+00:00"
        basedOn:
        - "basedOn"
        - "basedOn"
      meta:
        interpretation:
          source:
          - concept: "concept"
            weight: 0.80082819046101150206595775671303272247314453125
            occurrence: 6.02745618307040320615897144307382404804229736328125
          - concept: "concept"
            weight: 0.80082819046101150206595775671303272247314453125
            occurrence: 6.02745618307040320615897144307382404804229736328125
        nearestNeighbors:
          neighbors:
          - distance: 1.4658129
            concept: "concept"
            vector:
            - 5.962134
            - 5.962134
          - distance: 1.4658129
            concept: "concept"
            vector:
            - 5.962134
            - 5.962134
        featureProjection:
          vector:
          - 5.637377
          - 5.637377
        vector: ""
        classification:
          classifiedFields:
          - "classifiedFields"
          - "classifiedFields"
          scope:
          - "scope"
          - "scope"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          completed: "2000-01-23T04:56:07.000+00:00"
          basedOn:
          - "basedOn"
          - "basedOn"
        semanticPath:
          path:
          - distanceToResult: 7.0614014
            distanceToQuery: 2.302136
            distanceToPrevious: 9.301444
            concept: "concept"
            distanceToNext: 3.6160767
          - distanceToResult: 7.0614014
            distanceToQuery: 2.302136
            distanceToPrevious: 9.301444
            concept: "concept"
            distanceToNext: 3.6160767
      _featureProjection:
        vector:
        - 5.637377
        - 5.637377
      lastUpdateTimeUnix: 4
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      _vector: ""
      creationTimeUnix: 2
      class: "class"
      vectorWeights: {}
      _interpretation:
        source:
        - concept: "concept"
          weight: 0.80082819046101150206595775671303272247314453125
          occurrence: 6.02745618307040320615897144307382404804229736328125
        - concept: "concept"
          weight: 0.80082819046101150206595775671303272247314453125
          occurrence: 6.02745618307040320615897144307382404804229736328125
      _nearestNeighbors:
        neighbors:
        - distance: 1.4658129
          concept: "concept"
          vector:
          - 5.962134
          - 5.962134
        - distance: 1.4658129
          concept: "concept"
          vector:
          - 5.962134
          - 5.962134
  ActionsGetResponse:
    allOf:
    - $ref: "#/definitions/Action"
    - properties:
        deprecations:
          type: "array"
          items:
            $ref: "#/definitions/Deprecation"
    - properties:
        result:
          $ref: "#/definitions/ActionsGetResponse_result"
  ActionsListResponse:
    type: "object"
    properties:
      actions:
        type: "array"
        description: "The actual list of Actions."
        items:
          $ref: "#/definitions/Action"
      deprecations:
        type: "array"
        items:
          $ref: "#/definitions/Deprecation"
      totalResults:
        type: "integer"
        format: "int64"
        description: "The total number of Actions for the query. The number of items\
          \ in a response may be smaller due to paging."
    description: "List of Actions."
    example:
      totalResults: 7
      deprecations:
      - msg: "msg"
        mitigation: "mitigation"
        removedTime: "2000-01-23T04:56:07.000+00:00"
        sinceVersion: "sinceVersion"
        removedIn: "removedIn"
        sinceTime: "2000-01-23T04:56:07.000+00:00"
        locations:
        - "locations"
        - "locations"
        id: "id"
        plannedRemovalVersion: "plannedRemovalVersion"
        apiType: "apiType"
        status: "status"
      - msg: "msg"
        mitigation: "mitigation"
        removedTime: "2000-01-23T04:56:07.000+00:00"
        sinceVersion: "sinceVersion"
        removedIn: "removedIn"
        sinceTime: "2000-01-23T04:56:07.000+00:00"
        locations:
        - "locations"
        - "locations"
        id: "id"
        plannedRemovalVersion: "plannedRemovalVersion"
        apiType: "apiType"
        status: "status"
      actions:
      - schema: {}
        _classification:
          classifiedFields:
          - "classifiedFields"
          - "classifiedFields"
          scope:
          - "scope"
          - "scope"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          completed: "2000-01-23T04:56:07.000+00:00"
          basedOn:
          - "basedOn"
          - "basedOn"
        meta:
          interpretation:
            source:
            - concept: "concept"
              weight: 0.80082819046101150206595775671303272247314453125
              occurrence: 6.02745618307040320615897144307382404804229736328125
            - concept: "concept"
              weight: 0.80082819046101150206595775671303272247314453125
              occurrence: 6.02745618307040320615897144307382404804229736328125
          nearestNeighbors:
            neighbors:
            - distance: 1.4658129
              concept: "concept"
              vector:
              - 5.962134
              - 5.962134
            - distance: 1.4658129
              concept: "concept"
              vector:
              - 5.962134
              - 5.962134
          featureProjection:
            vector:
            - 5.637377
            - 5.637377
          vector: ""
          classification:
            classifiedFields:
            - "classifiedFields"
            - "classifiedFields"
            scope:
            - "scope"
            - "scope"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            completed: "2000-01-23T04:56:07.000+00:00"
            basedOn:
            - "basedOn"
            - "basedOn"
          semanticPath:
            path:
            - distanceToResult: 7.0614014
              distanceToQuery: 2.302136
              distanceToPrevious: 9.301444
              concept: "concept"
              distanceToNext: 3.6160767
            - distanceToResult: 7.0614014
              distanceToQuery: 2.302136
              distanceToPrevious: 9.301444
              concept: "concept"
              distanceToNext: 3.6160767
        _featureProjection:
          vector:
          - 5.637377
          - 5.637377
        lastUpdateTimeUnix: 4
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        _vector: ""
        creationTimeUnix: 2
        class: "class"
        vectorWeights: {}
        _interpretation:
          source:
          - concept: "concept"
            weight: 0.80082819046101150206595775671303272247314453125
            occurrence: 6.02745618307040320615897144307382404804229736328125
          - concept: "concept"
            weight: 0.80082819046101150206595775671303272247314453125
            occurrence: 6.02745618307040320615897144307382404804229736328125
        _nearestNeighbors:
          neighbors:
          - distance: 1.4658129
            concept: "concept"
            vector:
            - 5.962134
            - 5.962134
          - distance: 1.4658129
            concept: "concept"
            vector:
            - 5.962134
            - 5.962134
      - schema: {}
        _classification:
          classifiedFields:
          - "classifiedFields"
          - "classifiedFields"
          scope:
          - "scope"
          - "scope"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          completed: "2000-01-23T04:56:07.000+00:00"
          basedOn:
          - "basedOn"
          - "basedOn"
        meta:
          interpretation:
            source:
            - concept: "concept"
              weight: 0.80082819046101150206595775671303272247314453125
              occurrence: 6.02745618307040320615897144307382404804229736328125
            - concept: "concept"
              weight: 0.80082819046101150206595775671303272247314453125
              occurrence: 6.02745618307040320615897144307382404804229736328125
          nearestNeighbors:
            neighbors:
            - distance: 1.4658129
              concept: "concept"
              vector:
              - 5.962134
              - 5.962134
            - distance: 1.4658129
              concept: "concept"
              vector:
              - 5.962134
              - 5.962134
          featureProjection:
            vector:
            - 5.637377
            - 5.637377
          vector: ""
          classification:
            classifiedFields:
            - "classifiedFields"
            - "classifiedFields"
            scope:
            - "scope"
            - "scope"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            completed: "2000-01-23T04:56:07.000+00:00"
            basedOn:
            - "basedOn"
            - "basedOn"
          semanticPath:
            path:
            - distanceToResult: 7.0614014
              distanceToQuery: 2.302136
              distanceToPrevious: 9.301444
              concept: "concept"
              distanceToNext: 3.6160767
            - distanceToResult: 7.0614014
              distanceToQuery: 2.302136
              distanceToPrevious: 9.301444
              concept: "concept"
              distanceToNext: 3.6160767
        _featureProjection:
          vector:
          - 5.637377
          - 5.637377
        lastUpdateTimeUnix: 4
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        _vector: ""
        creationTimeUnix: 2
        class: "class"
        vectorWeights: {}
        _interpretation:
          source:
          - concept: "concept"
            weight: 0.80082819046101150206595775671303272247314453125
            occurrence: 6.02745618307040320615897144307382404804229736328125
          - concept: "concept"
            weight: 0.80082819046101150206595775671303272247314453125
            occurrence: 6.02745618307040320615897144307382404804229736328125
        _nearestNeighbors:
          neighbors:
          - distance: 1.4658129
            concept: "concept"
            vector:
            - 5.962134
            - 5.962134
          - distance: 1.4658129
            concept: "concept"
            vector:
            - 5.962134
            - 5.962134
  C11yWordsResponse:
    properties:
      concatenatedWord:
        $ref: "#/definitions/C11yWordsResponse_concatenatedWord"
      individualWords:
        type: "array"
        description: "Weighted results for per individual word"
        items:
          $ref: "#/definitions/C11yWordsResponse_individualWords"
    description: "An array of available words and contexts."
    example:
      concatenatedWord:
        concatenatedNearestNeighbors: ""
        singleWords:
        - ""
        - ""
        concatenatedVector: ""
        concatenatedWord: "concatenatedWord"
      individualWords:
      - inC11y: true
        word: "word"
        info:
          nearestNeighbors: ""
          vector: ""
      - inC11y: true
        word: "word"
        info:
          nearestNeighbors: ""
          vector: ""
  C11yExtension:
    properties:
      concept:
        type: "string"
        example: "foobarium"
        description: "The new concept you want to extend. Must be an all-lowercase\
          \ single word, or a space delimited compound word. Examples: 'foobarium',\
          \ 'my custom concept'"
      definition:
        type: "string"
        description: "A list of space-delimited words or a sentence describing what\
          \ the custom concept is about. Avoid using the custom concept itself. An\
          \ Example definition for the custom concept 'foobarium': would be 'a naturally\
          \ occourring element which can only be seen by programmers'"
      weight:
        type: "number"
        format: "float"
        description: "Weight of the definition of the new concept where 1='override\
          \ existing definition entirely' and 0='ignore custom definition'. Note that\
          \ if the custom concept is not present in the contextionary yet, the weight\
          \ cannot be less than 1."
    description: "A resource describing an extension to the contextinoary, containing\
      \ both the identifier and the definition of the extension"
    example:
      concept: "foobarium"
      weight: 0.8008282
      definition: "definition"
  C11yNearestNeighbors:
    type: "array"
    description: "C11y function to show the nearest neighbors to a word."
    items:
      $ref: "#/definitions/C11yNearestNeighbors_inner"
  C11yVector:
    type: "array"
    description: "A Vector in the Contextionary"
    items:
      type: "number"
      format: "float"
      minimum: 300
      maximum: 300
  C11yVectorBasedQuestion:
    type: "array"
    description: "Receive question based on array of classes, properties and values."
    items:
      $ref: "#/definitions/C11yVectorBasedQuestion_inner"
  Deprecation:
    type: "object"
    properties:
      id:
        type: "string"
        description: "The id that uniquely identifies this particular deprecations\
          \ (mostly used internally)"
      status:
        type: "string"
        description: "Whether the problematic API functionality is deprecated (planned\
          \ to be removed) or already removed"
      apiType:
        type: "string"
        description: "Describes which API is effected, usually one of: REST, GraphQL"
      msg:
        type: "string"
        description: "What this deprecation is about"
      mitigation:
        type: "string"
        description: "User-required action to not be affected by the (planned) removal"
      sinceVersion:
        type: "string"
        description: "The deprecation was introduced in this version"
      plannedRemovalVersion:
        type: "string"
        description: "A best-effort guess of which upcoming version will remove the\
          \ feature entirely"
      removedIn:
        type: "string"
        description: "If the feature has already been removed, it was removed in this\
          \ version"
        x-nullable: true
      removedTime:
        type: "string"
        format: "date-time"
        description: "If the feature has already been removed, it was removed at this\
          \ timestamp"
        x-nullable: true
      sinceTime:
        type: "string"
        format: "date-time"
        description: "The deprecation was introduced in this version"
      locations:
        type: "array"
        description: "The locations within the specified API affected by this deprecation"
        items:
          type: "string"
    example:
      msg: "msg"
      mitigation: "mitigation"
      removedTime: "2000-01-23T04:56:07.000+00:00"
      sinceVersion: "sinceVersion"
      removedIn: "removedIn"
      sinceTime: "2000-01-23T04:56:07.000+00:00"
      locations:
      - "locations"
      - "locations"
      id: "id"
      plannedRemovalVersion: "plannedRemovalVersion"
      apiType: "apiType"
      status: "status"
  ErrorResponse:
    type: "object"
    properties:
      error:
        type: "array"
        items:
          $ref: "#/definitions/ErrorResponse_error"
    description: "An error response given by Weaviate end-points."
  GraphQLError:
    properties:
      locations:
        type: "array"
        items:
          $ref: "#/definitions/GraphQLError_locations"
      message:
        type: "string"
      path:
        type: "array"
        items:
          type: "string"
    description: "An error response caused by a GraphQL query."
    example:
      path:
      - "path"
      - "path"
      locations:
      - line: 6
        column: 0
      - line: 6
        column: 0
      message: "message"
  GraphQLQuery:
    type: "object"
    properties:
      operationName:
        type: "string"
        description: "The name of the operation if multiple exist in the query."
      query:
        type: "string"
        description: "Query based on GraphQL syntax."
      variables:
        type: "object"
        description: "Additional variables for the query."
        properties: {}
    description: "GraphQL query based on: http://facebook.github.io/graphql/."
  GraphQLQueries:
    type: "array"
    description: "A list of GraphQL queries."
    items:
      $ref: "#/definitions/GraphQLQuery"
  GraphQLResponse:
    properties:
      data:
        type: "object"
        description: "GraphQL data object."
        additionalProperties:
          $ref: "#/definitions/JsonObject"
      errors:
        type: "array"
        description: "Array with errors."
        items:
          $ref: "#/definitions/GraphQLError"
    description: "GraphQL based response: http://facebook.github.io/graphql/."
    example:
      data:
        key: {}
      errors:
      - path:
        - "path"
        - "path"
        locations:
        - line: 6
          column: 0
        - line: 6
          column: 0
        message: "message"
      - path:
        - "path"
        - "path"
        locations:
        - line: 6
          column: 0
        - line: 6
          column: 0
        message: "message"
  GraphQLResponses:
    type: "array"
    description: "A list of GraphQL responses."
    items:
      $ref: "#/definitions/GraphQLResponse"
  JsonObject:
    type: "object"
    description: "JSON object value."
  Meta:
    type: "object"
    properties:
      hostname:
        type: "string"
        format: "url"
        description: "The url of the host."
      version:
        type: "string"
        description: "Version of weaviate you are currently running"
      contextionaryWordCount:
        type: "number"
        format: "int"
        description: "Number of total words in the contextionary"
      contextionaryVersion:
        type: "string"
        description: "Version of the contextionary service connected to weaviate"
    description: "Contains meta information of the current Weaviate instance."
    example:
      hostname: "http://example.com/aeiou"
      contextionaryWordCount: 0.80082819046101150206595775671303272247314453125
      version: "version"
      contextionaryVersion: "contextionaryVersion"
  MultipleRef:
    type: "array"
    description: "Multiple instances of references to other objects."
    items:
      $ref: "#/definitions/SingleRef"
  PatchDocumentThing:
    required:
    - "op"
    - "path"
    properties:
      from:
        type: "string"
        description: "A string containing a JSON Pointer value."
      op:
        type: "string"
        description: "The operation to be performed."
        enum:
        - "add"
        - "remove"
        - "replace"
        - "move"
        - "copy"
        - "test"
      path:
        type: "string"
        description: "A JSON-Pointer."
      value:
        type: "object"
        description: "The value to be used within the operations."
        properties: {}
      merge:
        $ref: "#/definitions/Thing"
    description: "Either a JSONPatch document as defined by RFC 6902 (from, op, path,\
      \ value), or a merge document (RFC 7396)."
  PatchDocumentAction:
    required:
    - "op"
    - "path"
    properties:
      from:
        type: "string"
        description: "A string containing a JSON Pointer value."
      op:
        type: "string"
        description: "The operation to be performed."
        enum:
        - "add"
        - "remove"
        - "replace"
        - "move"
        - "copy"
        - "test"
      path:
        type: "string"
        description: "A JSON-Pointer."
      value:
        type: "object"
        description: "The value to be used within the operations."
        properties: {}
      merge:
        $ref: "#/definitions/Thing"
    description: "Either a JSONPatch document as defined by RFC 6902 (from, op, path,\
      \ value), or a merge document (RFC 7396)."
  PeerUpdate:
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "The session ID of the peer."
      name:
        type: "string"
        description: "Human readable name."
      uri:
        type: "string"
        format: "uri"
        description: "The location where the peer is exposed to the internet."
      schemaHash:
        type: "string"
        description: "The latest known hash of the peer's schema."
    description: "A single peer in the network."
  PeerUpdateList:
    type: "array"
    description: "List of known peers."
    items:
      $ref: "#/definitions/PeerUpdate"
  VectorWeights:
    type: "object"
    description: "Allow custom overrides of vector weights as math expressions. E.g.\
      \ \"pancake\": \"7\" will set the weight for the word pancake to 7 in the vectorization,\
      \ whereas \"w * 3\" would triple the originally calculated word. This is an\
      \ open object, with OpenAPI Specification 3.0 this will be more detailed. See\
      \ Weaviate docs for more info. In the future this will become a key/value (string/string)\
      \ object."
  PropertySchema:
    type: "object"
    description: "This is an open object, with OpenAPI Specification 3.0 this will\
      \ be more detailed. See Weaviate docs for more info. In the future this will\
      \ become a key/value OR a SingleRef definition."
  SchemaHistory:
    type: "object"
    description: "This is an open object, with OpenAPI Specification 3.0 this will\
      \ be more detailed. See Weaviate docs for more info. In the future this will\
      \ become a key/value OR a SingleRef definition."
  Schema:
    type: "object"
    properties:
      classes:
        type: "array"
        description: "Semantic classes that are available."
        items:
          $ref: "#/definitions/Class"
      maintainer:
        type: "string"
        format: "email"
        description: "Email of the maintainer."
      name:
        type: "string"
        description: "Name of the schema."
      type:
        type: "string"
        description: "Type of schema, should be \"thing\" or \"action\"."
        enum:
        - "thing"
        - "action"
    description: "Definitions of semantic schemas (also see: https://github.com/semi-technologies/weaviate-semantic-schemas)."
    example:
      classes:
      - keywords: ""
        description: "description"
        vectorizeClassName: true
        class: "class"
        properties:
        - keywords: ""
          dataType:
          - "dataType"
          - "dataType"
          name: "name"
          description: "description"
          vectorizePropertyName: true
          index: true
          cardinality: "cardinality"
        - keywords: ""
          dataType:
          - "dataType"
          - "dataType"
          name: "name"
          description: "description"
          vectorizePropertyName: true
          index: true
          cardinality: "cardinality"
      - keywords: ""
        description: "description"
        vectorizeClassName: true
        class: "class"
        properties:
        - keywords: ""
          dataType:
          - "dataType"
          - "dataType"
          name: "name"
          description: "description"
          vectorizePropertyName: true
          index: true
          cardinality: "cardinality"
        - keywords: ""
          dataType:
          - "dataType"
          - "dataType"
          name: "name"
          description: "description"
          vectorizePropertyName: true
          index: true
          cardinality: "cardinality"
      name: "name"
      type: "thing"
      maintainer: "maintainer"
  Class:
    type: "object"
    properties:
      class:
        type: "string"
        description: "Name of the class as URI relative to the schema URL."
      keywords:
        $ref: "#/definitions/Keywords"
      vectorizeClassName:
        type: "boolean"
        description: "Set this to true if the object vector should include the class\
          \ name in calculating the overall vector position"
        x-nullable: true
      description:
        type: "string"
        description: "Description of the class."
      properties:
        type: "array"
        description: "The properties of the class."
        items:
          $ref: "#/definitions/Property"
    example:
      keywords: ""
      description: "description"
      vectorizeClassName: true
      class: "class"
      properties:
      - keywords: ""
        dataType:
        - "dataType"
        - "dataType"
        name: "name"
        description: "description"
        vectorizePropertyName: true
        index: true
        cardinality: "cardinality"
      - keywords: ""
        dataType:
        - "dataType"
        - "dataType"
        name: "name"
        description: "description"
        vectorizePropertyName: true
        index: true
        cardinality: "cardinality"
  Keywords:
    type: "array"
    description: "Describes a class or property using multiple weighted words."
    items:
      $ref: "#/definitions/Keywords_inner"
  Property:
    type: "object"
    properties:
      dataType:
        type: "array"
        description: "Can be a reference to another type when it starts with a capital\
          \ (for example Person), otherwise \"string\" or \"int\"."
        items:
          type: "string"
      cardinality:
        type: "string"
        description: "DEPRECATED - do not use anymore."
        default: ""
      description:
        type: "string"
        description: "Description of the property."
      vectorizePropertyName:
        type: "boolean"
        description: "Set this to true if the object vector should include this property's\
          \ name in calculating the overall vector position. If set to false (default),\
          \ only the property value will be used."
      name:
        type: "string"
        description: "Name of the property as URI relative to the schema URL."
      keywords:
        $ref: "#/definitions/Keywords"
      index:
        type: "boolean"
        description: "Optional. By default each property is fully indexed both for\
          \ full-text, as well as vector-search. You can ignore properties in searches\
          \ by explicitly setting index to false. Not set is the same as true"
        x-nullable: true
    example:
      keywords: ""
      dataType:
      - "dataType"
      - "dataType"
      name: "name"
      description: "description"
      vectorizePropertyName: true
      index: true
      cardinality: "cardinality"
  SingleRef:
    properties:
      class:
        type: "string"
        format: "uri"
        description: "If using a concept reference (rather than a direct reference),\
          \ specify the desired class name here"
      schema:
        description: "If using a concept reference (rather than a direct reference),\
          \ specify the desired properties here"
        $ref: "#/definitions/PropertySchema"
      beacon:
        type: "string"
        format: "uri"
        description: "If using a direct reference, specify the URI to point to the\
          \ cross-ref here. Should be in the form of weaviate://localhost/things/<uuid>\
          \ for the example of a local cross-ref to a thing"
      href:
        type: "string"
        format: "uri"
        description: "If using a direct reference, this read-only fields provides\
          \ a link to the refernced resource. If 'origin' is globally configured,\
          \ an absolute URI is shown - a relative URI otherwise."
      meta:
        description: "Additional Meta information about this particular reference.\
          \ Only shown if meta==true."
        $ref: "#/definitions/ReferenceMeta"
      _classification:
        description: "Additional Meta information about classifications if the item\
          \ was part of one"
        $ref: "#/definitions/ReferenceMetaClassification"
    description: "Either set beacon (direct reference) or set class and schema (concept\
      \ reference)"
    example:
      schema: {}
      beacon: "http://example.com/aeiou"
      _classification:
        losingDistance: 6.02745618307040320615897144307382404804229736328125
        winningDistance: 0.80082819046101150206595775671303272247314453125
      meta:
        classification:
          losingDistance: 6.02745618307040320615897144307382404804229736328125
          winningDistance: 0.80082819046101150206595775671303272247314453125
      href: "http://example.com/aeiou"
      class: "http://example.com/aeiou"
  ReferenceMeta:
    properties:
      classification:
        description: "If a property was set through a classification, this meta field\
          \ contains additional info"
        $ref: "#/definitions/ReferenceMetaClassification"
    description: "Additional Meta information about this particular reference."
    example:
      classification:
        losingDistance: 6.02745618307040320615897144307382404804229736328125
        winningDistance: 0.80082819046101150206595775671303272247314453125
  UnderscoreProperties:
    properties:
      classification:
        description: "If this object was subject of a classificiation, additional\
          \ meta info about this classification is available here"
        $ref: "#/definitions/UnderscorePropertiesClassification"
      vector:
        description: "This object's position in the Contextionary vector space"
        $ref: "#/definitions/C11yVector"
      interpretation:
        description: "Additional information about how the object was vectorized"
        $ref: "#/definitions/Interpretation"
      nearestNeighbors:
        description: "Neighboring concepts of your search results"
        $ref: "#/definitions/NearestNeighbors"
      featureProjection:
        description: "The concepts vector projected into a lower dimensional space\
          \ (for visualization purposes)"
        $ref: "#/definitions/FeatureProjection"
      semanticPath:
        description: "The semantic path between the search query and the result. Only\
          \ on 'explore' searches"
        $ref: "#/definitions/SemanticPath"
    description: "Additional Meta information about a single thing/action object."
    example:
      interpretation:
        source:
        - concept: "concept"
          weight: 0.80082819046101150206595775671303272247314453125
          occurrence: 6.02745618307040320615897144307382404804229736328125
        - concept: "concept"
          weight: 0.80082819046101150206595775671303272247314453125
          occurrence: 6.02745618307040320615897144307382404804229736328125
      nearestNeighbors:
        neighbors:
        - distance: 1.4658129
          concept: "concept"
          vector:
          - 5.962134
          - 5.962134
        - distance: 1.4658129
          concept: "concept"
          vector:
          - 5.962134
          - 5.962134
      featureProjection:
        vector:
        - 5.637377
        - 5.637377
      vector: ""
      classification:
        classifiedFields:
        - "classifiedFields"
        - "classifiedFields"
        scope:
        - "scope"
        - "scope"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        completed: "2000-01-23T04:56:07.000+00:00"
        basedOn:
        - "basedOn"
        - "basedOn"
      semanticPath:
        path:
        - distanceToResult: 7.0614014
          distanceToQuery: 2.302136
          distanceToPrevious: 9.301444
          concept: "concept"
          distanceToNext: 3.6160767
        - distanceToResult: 7.0614014
          distanceToQuery: 2.302136
          distanceToPrevious: 9.301444
          concept: "concept"
          distanceToNext: 3.6160767
  ReferenceMetaClassification:
    properties:
      winningDistance:
        type: "number"
        format: "float32"
        description: "Mean distance of all neighbors from the winning group"
      losingDistance:
        type: "number"
        format: "float32"
        description: "Mean distance of all neighbors from the losing group. Optional.\
          \ If k equals the size of the winning group, there is no losing group."
        x-nullable: true
    description: "This meta field contains additional info about the classified reference\
      \ property"
    example:
      losingDistance: 6.02745618307040320615897144307382404804229736328125
      winningDistance: 0.80082819046101150206595775671303272247314453125
  UnderscorePropertiesClassification:
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "unique identifier of the classification run"
      completed:
        type: "string"
        format: "date-time"
        description: "Timestamp when this particular object was classified. This is\
          \ usually sooner than the overall completion time of the classification,\
          \ as the overall completion time will only be set once every object has\
          \ been classified."
      scope:
        type: "array"
        description: "The properties in scope of the classification. Note that this\
          \ doesn't mean that these fields were necessarily classified, this only\
          \ means that those fields were in scope of the classificiation. See \"classifiedFields\"\
          \ for details."
        items:
          type: "string"
      classifiedFields:
        type: "array"
        description: "The (reference) fields which were classified as part of this\
          \ classification. Note that this might contain fewere entries than \"scope\"\
          , if one of the fields was already set prior to the classification, for\
          \ example"
        items:
          type: "string"
      basedOn:
        type: "array"
        description: "The (primitive) field(s) which were used as a basis for classification.\
          \ For example, if the type of classification is \"knn\" with k=3, the 3\
          \ nearest neighbors - based on these fields - were considered for the classification."
        items:
          type: "string"
    description: "This underscore property contains additional info about the classification\
      \ which affected this object"
    example:
      classifiedFields:
      - "classifiedFields"
      - "classifiedFields"
      scope:
      - "scope"
      - "scope"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      completed: "2000-01-23T04:56:07.000+00:00"
      basedOn:
      - "basedOn"
      - "basedOn"
  NearestNeighbors:
    type: "object"
    properties:
      neighbors:
        type: "array"
        description: "The individual neighbor items"
        items:
          $ref: "#/definitions/NearestNeighbor"
    description: "A group of neighboring concepts"
    example:
      neighbors:
      - distance: 1.4658129
        concept: "concept"
        vector:
        - 5.962134
        - 5.962134
      - distance: 1.4658129
        concept: "concept"
        vector:
        - 5.962134
        - 5.962134
  NearestNeighbor:
    type: "object"
    properties:
      concept:
        type: "string"
        description: "The neighboring concept"
      distance:
        type: "number"
        format: "float"
        description: "The distance between the result and this neighbor"
      vector:
        type: "array"
        description: "The neighbor's vector position"
        items:
          type: "number"
          format: "float"
    description: "A group of neighboring concepts"
    example:
      distance: 1.4658129
      concept: "concept"
      vector:
      - 5.962134
      - 5.962134
  Interpretation:
    properties:
      source:
        type: "array"
        description: "The input that was used to vectorize this object"
        items:
          $ref: "#/definitions/InterpretationSource"
    description: "This underscore property contains additional info about the how\
      \ the class was vectorized"
    example:
      source:
      - concept: "concept"
        weight: 0.80082819046101150206595775671303272247314453125
        occurrence: 6.02745618307040320615897144307382404804229736328125
      - concept: "concept"
        weight: 0.80082819046101150206595775671303272247314453125
        occurrence: 6.02745618307040320615897144307382404804229736328125
  InterpretationSource:
    properties:
      concept:
        type: "string"
      weight:
        type: "number"
        format: "float32"
      occurrence:
        type: "number"
        format: "uint64"
    description: "This underscore property contains additional info about the how\
      \ the class was vectorized"
    example:
      concept: "concept"
      weight: 0.80082819046101150206595775671303272247314453125
      occurrence: 6.02745618307040320615897144307382404804229736328125
  FeatureProjection:
    properties:
      vector:
        type: "array"
        items:
          type: "number"
          format: "float"
    description: "A lower-dimensional representation of the objects vector"
    example:
      vector:
      - 5.637377
      - 5.637377
  SemanticPath:
    properties:
      path:
        type: "array"
        items:
          $ref: "#/definitions/SemanticPathElement"
    description: "A semantic path between two objects, e.g. a search query and a result"
    example:
      path:
      - distanceToResult: 7.0614014
        distanceToQuery: 2.302136
        distanceToPrevious: 9.301444
        concept: "concept"
        distanceToNext: 3.6160767
      - distanceToResult: 7.0614014
        distanceToQuery: 2.302136
        distanceToPrevious: 9.301444
        concept: "concept"
        distanceToNext: 3.6160767
  SemanticPathElement:
    properties:
      concept:
        type: "string"
      distanceToQuery:
        type: "number"
        format: "float"
      distanceToResult:
        type: "number"
        format: "float"
      distanceToPrevious:
        type: "number"
        format: "float"
        x-nullable: true
      distanceToNext:
        type: "number"
        format: "float"
        x-nullable: true
    description: "On link on the semantic path chain"
    example:
      distanceToResult: 7.0614014
      distanceToQuery: 2.302136
      distanceToPrevious: 9.301444
      concept: "concept"
      distanceToNext: 3.6160767
  BatchReference:
    properties:
      from:
        type: "string"
        format: "uri"
        example: "weaviate://localhost/things/Zoo/a5d09582-4239-4702-81c9-92a6e0122bb4/hasAnimals"
        description: "Long-form beacon-style URI to identify the source of the cross-ref\
          \ including the property name. Should be in the form of weaviate://localhost/<kinds>/<uuid>/<className>/<propertyName>,\
          \ where <kinds> must be one of 'actions', 'things' and <className> and <propertyName>\
          \ must represent the cross-ref property of source class to be used."
      to:
        type: "string"
        format: "uri"
        example: "weaviate://localhost/things/97525810-a9a5-4eb0-858a-71449aeb007f"
        description: "Short-form URI to point to the cross-ref. Should be in the form\
          \ of weaviate://localhost/things/<uuid> for the example of a local cross-ref\
          \ to a thing"
  BatchReferenceResponse:
    allOf:
    - $ref: "#/definitions/BatchReference"
    - properties:
        result:
          $ref: "#/definitions/BatchReferenceResponse_result"
  GeoCoordinates:
    properties:
      latitude:
        type: "number"
        format: "float"
        description: "The latitude of the point on earth in decimal form"
        x-nullable: true
      longitude:
        type: "number"
        format: "float"
        description: "The longitude of the point on earth in decimal form"
        x-nullable: true
    example:
      latitude: 0.8008282
      longitude: 6.0274563
  PhoneNumber:
    properties:
      input:
        type: "string"
        description: "The raw input as the phone number is present in your raw data\
          \ set. It will be parsed into the standardized formats if valid."
      internationalFormatted:
        type: "string"
        description: "Read-only. Parsed result in the international format (e.g. +49\
          \ 123 ...)"
      defaultCountry:
        type: "string"
        description: "Optional. The ISO 3166-1 alpha-2 country code. This is used\
          \ to figure out the correct countryCode and international format if only\
          \ a national number (e.g. 0123 4567) is provided"
      countryCode:
        type: "number"
        format: "uint64"
        description: "Read-only. The numerical country code (e.g. 49)"
      national:
        type: "number"
        format: "uint64"
        description: "Read-only. The numerical representation of the national part"
      nationalFormatted:
        type: "string"
        description: "Read-only. Parsed result in the national format (e.g. 0123 456789)"
      valid:
        type: "boolean"
        description: "Read-only. Indicates whether the parsed number is a valid phone\
          \ number"
  Thing:
    type: "object"
    properties:
      class:
        type: "string"
        description: "Class of the Thing, defined in the schema."
      vectorWeights:
        $ref: "#/definitions/VectorWeights"
      schema:
        $ref: "#/definitions/PropertySchema"
      meta:
        $ref: "#/definitions/UnderscoreProperties"
      id:
        type: "string"
        format: "uuid"
        description: "ID of the Thing."
      creationTimeUnix:
        type: "integer"
        format: "int64"
        description: "Timestamp of creation of this Thing in milliseconds since epoch\
          \ UTC."
      lastUpdateTimeUnix:
        type: "integer"
        format: "int64"
        description: "Timestamp of the last Thing update in milliseconds since epoch\
          \ UTC."
      _classification:
        description: "If this object was subject of a classificiation, additional\
          \ meta info about this classification is available here. (Underscore properties\
          \ are optional, include them using the ?include=_<propName> parameter)"
        $ref: "#/definitions/UnderscorePropertiesClassification"
      _vector:
        description: "This object's position in the Contextionary vector space. (Underscore\
          \ properties are optional, include them using the ?include=_<propName> parameter)"
        $ref: "#/definitions/C11yVector"
      _interpretation:
        description: "Additional information about how this property was interpreted\
          \ at vectorization. (Underscore properties are optional, include them using\
          \ the ?include=_<propName> parameter)"
        $ref: "#/definitions/Interpretation"
      _nearestNeighbors:
        description: "Additional information about the neighboring concepts of this\
          \ element"
        $ref: "#/definitions/NearestNeighbors"
      _featureProjection:
        description: "A feature projection of the object's vector into lower dimensions\
          \ for visualization"
        $ref: "#/definitions/FeatureProjection"
    example:
      schema: {}
      _classification:
        classifiedFields:
        - "classifiedFields"
        - "classifiedFields"
        scope:
        - "scope"
        - "scope"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        completed: "2000-01-23T04:56:07.000+00:00"
        basedOn:
        - "basedOn"
        - "basedOn"
      meta:
        interpretation:
          source:
          - concept: "concept"
            weight: 0.80082819046101150206595775671303272247314453125
            occurrence: 6.02745618307040320615897144307382404804229736328125
          - concept: "concept"
            weight: 0.80082819046101150206595775671303272247314453125
            occurrence: 6.02745618307040320615897144307382404804229736328125
        nearestNeighbors:
          neighbors:
          - distance: 1.4658129
            concept: "concept"
            vector:
            - 5.962134
            - 5.962134
          - distance: 1.4658129
            concept: "concept"
            vector:
            - 5.962134
            - 5.962134
        featureProjection:
          vector:
          - 5.637377
          - 5.637377
        vector: ""
        classification:
          classifiedFields:
          - "classifiedFields"
          - "classifiedFields"
          scope:
          - "scope"
          - "scope"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          completed: "2000-01-23T04:56:07.000+00:00"
          basedOn:
          - "basedOn"
          - "basedOn"
        semanticPath:
          path:
          - distanceToResult: 7.0614014
            distanceToQuery: 2.302136
            distanceToPrevious: 9.301444
            concept: "concept"
            distanceToNext: 3.6160767
          - distanceToResult: 7.0614014
            distanceToQuery: 2.302136
            distanceToPrevious: 9.301444
            concept: "concept"
            distanceToNext: 3.6160767
      _featureProjection:
        vector:
        - 5.637377
        - 5.637377
      lastUpdateTimeUnix: 6
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      _vector: ""
      creationTimeUnix: 0
      class: "class"
      vectorWeights: {}
      _interpretation:
        source:
        - concept: "concept"
          weight: 0.80082819046101150206595775671303272247314453125
          occurrence: 6.02745618307040320615897144307382404804229736328125
        - concept: "concept"
          weight: 0.80082819046101150206595775671303272247314453125
          occurrence: 6.02745618307040320615897144307382404804229736328125
      _nearestNeighbors:
        neighbors:
        - distance: 1.4658129
          concept: "concept"
          vector:
          - 5.962134
          - 5.962134
        - distance: 1.4658129
          concept: "concept"
          vector:
          - 5.962134
          - 5.962134
  ThingsGetResponse:
    allOf:
    - $ref: "#/definitions/Thing"
    - properties:
        deprecations:
          type: "array"
          items:
            $ref: "#/definitions/Deprecation"
    - properties:
        result:
          $ref: "#/definitions/ThingsGetResponse_result"
  ThingsListResponse:
    type: "object"
    properties:
      things:
        type: "array"
        description: "The actual list of Things."
        items:
          $ref: "#/definitions/Thing"
      deprecations:
        type: "array"
        items:
          $ref: "#/definitions/Deprecation"
      totalResults:
        type: "integer"
        format: "int64"
        description: "The total number of Things for the query. The number of items\
          \ in a response may be smaller due to paging."
    description: "List of Things."
    example:
      totalResults: 1
      things:
      - schema: {}
        _classification:
          classifiedFields:
          - "classifiedFields"
          - "classifiedFields"
          scope:
          - "scope"
          - "scope"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          completed: "2000-01-23T04:56:07.000+00:00"
          basedOn:
          - "basedOn"
          - "basedOn"
        meta:
          interpretation:
            source:
            - concept: "concept"
              weight: 0.80082819046101150206595775671303272247314453125
              occurrence: 6.02745618307040320615897144307382404804229736328125
            - concept: "concept"
              weight: 0.80082819046101150206595775671303272247314453125
              occurrence: 6.02745618307040320615897144307382404804229736328125
          nearestNeighbors:
            neighbors:
            - distance: 1.4658129
              concept: "concept"
              vector:
              - 5.962134
              - 5.962134
            - distance: 1.4658129
              concept: "concept"
              vector:
              - 5.962134
              - 5.962134
          featureProjection:
            vector:
            - 5.637377
            - 5.637377
          vector: ""
          classification:
            classifiedFields:
            - "classifiedFields"
            - "classifiedFields"
            scope:
            - "scope"
            - "scope"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            completed: "2000-01-23T04:56:07.000+00:00"
            basedOn:
            - "basedOn"
            - "basedOn"
          semanticPath:
            path:
            - distanceToResult: 7.0614014
              distanceToQuery: 2.302136
              distanceToPrevious: 9.301444
              concept: "concept"
              distanceToNext: 3.6160767
            - distanceToResult: 7.0614014
              distanceToQuery: 2.302136
              distanceToPrevious: 9.301444
              concept: "concept"
              distanceToNext: 3.6160767
        _featureProjection:
          vector:
          - 5.637377
          - 5.637377
        lastUpdateTimeUnix: 6
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        _vector: ""
        creationTimeUnix: 0
        class: "class"
        vectorWeights: {}
        _interpretation:
          source:
          - concept: "concept"
            weight: 0.80082819046101150206595775671303272247314453125
            occurrence: 6.02745618307040320615897144307382404804229736328125
          - concept: "concept"
            weight: 0.80082819046101150206595775671303272247314453125
            occurrence: 6.02745618307040320615897144307382404804229736328125
        _nearestNeighbors:
          neighbors:
          - distance: 1.4658129
            concept: "concept"
            vector:
            - 5.962134
            - 5.962134
          - distance: 1.4658129
            concept: "concept"
            vector:
            - 5.962134
            - 5.962134
      - schema: {}
        _classification:
          classifiedFields:
          - "classifiedFields"
          - "classifiedFields"
          scope:
          - "scope"
          - "scope"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          completed: "2000-01-23T04:56:07.000+00:00"
          basedOn:
          - "basedOn"
          - "basedOn"
        meta:
          interpretation:
            source:
            - concept: "concept"
              weight: 0.80082819046101150206595775671303272247314453125
              occurrence: 6.02745618307040320615897144307382404804229736328125
            - concept: "concept"
              weight: 0.80082819046101150206595775671303272247314453125
              occurrence: 6.02745618307040320615897144307382404804229736328125
          nearestNeighbors:
            neighbors:
            - distance: 1.4658129
              concept: "concept"
              vector:
              - 5.962134
              - 5.962134
            - distance: 1.4658129
              concept: "concept"
              vector:
              - 5.962134
              - 5.962134
          featureProjection:
            vector:
            - 5.637377
            - 5.637377
          vector: ""
          classification:
            classifiedFields:
            - "classifiedFields"
            - "classifiedFields"
            scope:
            - "scope"
            - "scope"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            completed: "2000-01-23T04:56:07.000+00:00"
            basedOn:
            - "basedOn"
            - "basedOn"
          semanticPath:
            path:
            - distanceToResult: 7.0614014
              distanceToQuery: 2.302136
              distanceToPrevious: 9.301444
              concept: "concept"
              distanceToNext: 3.6160767
            - distanceToResult: 7.0614014
              distanceToQuery: 2.302136
              distanceToPrevious: 9.301444
              concept: "concept"
              distanceToNext: 3.6160767
        _featureProjection:
          vector:
          - 5.637377
          - 5.637377
        lastUpdateTimeUnix: 6
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        _vector: ""
        creationTimeUnix: 0
        class: "class"
        vectorWeights: {}
        _interpretation:
          source:
          - concept: "concept"
            weight: 0.80082819046101150206595775671303272247314453125
            occurrence: 6.02745618307040320615897144307382404804229736328125
          - concept: "concept"
            weight: 0.80082819046101150206595775671303272247314453125
            occurrence: 6.02745618307040320615897144307382404804229736328125
        _nearestNeighbors:
          neighbors:
          - distance: 1.4658129
            concept: "concept"
            vector:
            - 5.962134
            - 5.962134
          - distance: 1.4658129
            concept: "concept"
            vector:
            - 5.962134
            - 5.962134
      deprecations:
      - msg: "msg"
        mitigation: "mitigation"
        removedTime: "2000-01-23T04:56:07.000+00:00"
        sinceVersion: "sinceVersion"
        removedIn: "removedIn"
        sinceTime: "2000-01-23T04:56:07.000+00:00"
        locations:
        - "locations"
        - "locations"
        id: "id"
        plannedRemovalVersion: "plannedRemovalVersion"
        apiType: "apiType"
        status: "status"
      - msg: "msg"
        mitigation: "mitigation"
        removedTime: "2000-01-23T04:56:07.000+00:00"
        sinceVersion: "sinceVersion"
        removedIn: "removedIn"
        sinceTime: "2000-01-23T04:56:07.000+00:00"
        locations:
        - "locations"
        - "locations"
        id: "id"
        plannedRemovalVersion: "plannedRemovalVersion"
        apiType: "apiType"
        status: "status"
  Classification:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
        example: "ee722219-b8ec-4db1-8f8d-5150bb1a9e0c"
        description: "ID to uniquely identify this classification run"
      class:
        type: "string"
        example: "City"
        description: "class (name) which is used in this classification"
      classifyProperties:
        type: "array"
        example:
        - "inCountry"
        description: "which ref-property to set as part of the classification"
        items:
          type: "string"
      basedOnProperties:
        type: "array"
        example:
        - "description"
        description: "base the text-based classification on these fields (of type\
          \ text)"
        items:
          type: "string"
      status:
        type: "string"
        example: "running"
        description: "status of this classification"
        enum:
        - "running"
        - "completed"
        - "failed"
      meta:
        description: "additional meta information about the classification"
        $ref: "#/definitions/ClassificationMeta"
      type:
        type: "string"
        example: "knn"
        description: "which algorythim to use for classifications"
        default: "knn"
        enum:
        - "knn"
        - "contextual"
      k:
        type: "integer"
        format: "int32"
        example: 3
        description: "k-value when using k-Neareast-Neighbor"
        default: 3
      informationGainCutoffPercentile:
        type: "integer"
        format: "int32"
        example: 30
        description: "Only available on type=contextual. All words in a source corpus\
          \ are ranked by their information gain against the possible target objects.\
          \ A cutoff percentile of 40 implies that the top 40% are used and the bottom\
          \ 60% are cut-off."
        default: 30
      informationGainMaximumBoost:
        type: "integer"
        format: "int32"
        example: 3
        description: "Only available on type=contextual. Words in a corpus will receive\
          \ an additional boost based on how high they are ranked according to information\
          \ gain. Setting this value to 3 implies that the top-ranked word will be\
          \ ranked 3 times as high as the bottom ranked word. The curve in between\
          \ is logarithmic. A maximum boost of 1 implies that no boosting occurs."
        default: 3
      tfidfCutoffPercentile:
        type: "integer"
        format: "int32"
        example: 80
        description: "Only available on type=contextual. All words in a corpus are\
          \ ranked by their tf-idf score. A cutoff percentile of 80 implies that the\
          \ top 80% are used and the bottom 20% are cut-off. This is very effective\
          \ to remove words that occur in almost all objects, such as filler and stop\
          \ words."
        default: 80
      minimumUsableWords:
        type: "integer"
        format: "int32"
        example: 3
        description: "Only available on type=contextual. Both IG and tf-idf are mechanisms\
          \ to remove words from the corpora. However, on very short corpora this\
          \ could lead to a removal of all words, or all but a single word. This value\
          \ guarantees that - regardless of tf-idf and IG score - always at least\
          \ n words are used."
        default: 3
      error:
        type: "string"
        example: "classify xzy: something went wrong"
        description: "error message if status == failed"
        default: ""
      sourceWhere:
        description: "limit the objects to be classified"
        $ref: "#/definitions/WhereFilter"
      trainingSetWhere:
        description: "Limit the training objects to be considered during the classification.\
          \ Can only be used on types with explicit training sets, such as 'knn'"
        $ref: "#/definitions/WhereFilter"
      targetWhere:
        description: "Limit the possible sources when using an algorithm which doesn't\
          \ really on trainig data, e.g. 'contextual'. When using an algorithm with\
          \ a training set, such as 'knn', limit the training set instead"
        $ref: "#/definitions/WhereFilter"
    description: "Manage classifications, trigger them and view status of past classifications."
    example:
      tfidfCutoffPercentile: 80
      basedOnProperties:
      - "description"
      k: 3
      type: "knn"
      error: "classify xzy: something went wrong"
      trainingSetWhere:
        operands:
        - null
        - null
        valueBoolean: false
        path:
        - "inCity"
        - "City"
        - "name"
        valueText: "my search term"
        valueNumber: 3.140000000000000124344978758017532527446746826171875
        valueString: "my search term"
        valueGeoRange:
          distance:
            max: 1.46581298050294517310021547018550336360931396484375
          geoCoordinates:
            latitude: 0.8008282
            longitude: 6.0274563
        valueDate: "TODO"
        valueInt: 2000
        operator: "GreaterThanEqual"
      informationGainMaximumBoost: 3
      sourceWhere:
        operands:
        - null
        - null
        valueBoolean: false
        path:
        - "inCity"
        - "City"
        - "name"
        valueText: "my search term"
        valueNumber: 3.140000000000000124344978758017532527446746826171875
        valueString: "my search term"
        valueGeoRange:
          distance:
            max: 1.46581298050294517310021547018550336360931396484375
          geoCoordinates:
            latitude: 0.8008282
            longitude: 6.0274563
        valueDate: "TODO"
        valueInt: 2000
        operator: "GreaterThanEqual"
      minimumUsableWords: 3
      meta:
        countSucceeded: 140
        countFailed: 7
        count: 147
        started: "2017-07-21T17:32:28Z"
        completed: "2017-07-21T17:32:28Z"
      informationGainCutoffPercentile: 30
      id: "ee722219-b8ec-4db1-8f8d-5150bb1a9e0c"
      class: "City"
      classifyProperties:
      - "inCountry"
      status: "running"
      targetWhere:
        operands:
        - null
        - null
        valueBoolean: false
        path:
        - "inCity"
        - "City"
        - "name"
        valueText: "my search term"
        valueNumber: 3.140000000000000124344978758017532527446746826171875
        valueString: "my search term"
        valueGeoRange:
          distance:
            max: 1.46581298050294517310021547018550336360931396484375
          geoCoordinates:
            latitude: 0.8008282
            longitude: 6.0274563
        valueDate: "TODO"
        valueInt: 2000
        operator: "GreaterThanEqual"
  ClassificationMeta:
    type: "object"
    properties:
      started:
        type: "string"
        format: "date-time"
        example: "2017-07-21T17:32:28Z"
        description: "time when this classification was started"
      completed:
        type: "string"
        format: "date-time"
        example: "2017-07-21T17:32:28Z"
        description: "time when this classification finished"
      count:
        type: "integer"
        example: 147
        description: "number of objects which were taken into consideration for classification"
      countSucceeded:
        type: "integer"
        example: 140
        description: "number of objects successfully classified"
      countFailed:
        type: "integer"
        example: 7
        description: "number of objects which could not be classified - see error\
          \ message for details"
    description: "Additional information to a specific classification"
    example:
      countSucceeded: 140
      countFailed: 7
      count: 147
      started: "2017-07-21T17:32:28Z"
      completed: "2017-07-21T17:32:28Z"
  WhereFilter:
    type: "object"
    properties:
      operands:
        type: "array"
        description: "combine multiple where filters, requires 'And' or 'Or' operator"
        items:
          $ref: "#/definitions/WhereFilter"
      operator:
        type: "string"
        example: "GreaterThanEqual"
        description: "operator to use"
        enum:
        - "And"
        - "Or"
        - "Equal"
        - "Like"
        - "Not"
        - "NotEqual"
        - "GreaterThan"
        - "GreaterThanEqual"
        - "LessThan"
        - "LessThanEqual"
        - "WithinGeoRange"
      path:
        type: "array"
        example:
        - "inCity"
        - "City"
        - "name"
        description: "path to the property currently being filtered"
        items:
          type: "string"
      valueInt:
        type: "integer"
        format: "int64"
        example: 2000
        description: "value as integer"
        x-nullable: true
      valueNumber:
        type: "number"
        format: "float64"
        example: 3.140000000000000124344978758017532527446746826171875
        description: "value as number/float"
        x-nullable: true
      valueBoolean:
        type: "boolean"
        example: false
        description: "value as boolean"
        x-nullable: true
      valueString:
        type: "string"
        example: "my search term"
        description: "value as string"
        x-nullable: true
      valueText:
        type: "string"
        example: "my search term"
        description: "value as text (on text props)"
        x-nullable: true
      valueDate:
        type: "string"
        example: "TODO"
        description: "value as date (as string)"
        x-nullable: true
      valueGeoRange:
        description: "value as geo coordinates and distance"
        $ref: "#/definitions/WhereFilterGeoRange"
    description: "Filter search results using a where filter"
    example:
      operands:
      - null
      - null
      valueBoolean: false
      path:
      - "inCity"
      - "City"
      - "name"
      valueText: "my search term"
      valueNumber: 3.140000000000000124344978758017532527446746826171875
      valueString: "my search term"
      valueGeoRange:
        distance:
          max: 1.46581298050294517310021547018550336360931396484375
        geoCoordinates:
          latitude: 0.8008282
          longitude: 6.0274563
      valueDate: "TODO"
      valueInt: 2000
      operator: "GreaterThanEqual"
  WhereFilterGeoRange:
    type: "object"
    properties:
      geoCoordinates:
        $ref: "#/definitions/GeoCoordinates"
      distance:
        $ref: "#/definitions/WhereFilterGeoRange_distance"
    description: "filter within a distance of a georange"
    example:
      distance:
        max: 1.46581298050294517310021547018550336360931396484375
      geoCoordinates:
        latitude: 0.8008282
        longitude: 6.0274563
  inline_response_200:
    type: "object"
    properties:
      links:
        type: "array"
        items:
          $ref: "#/definitions/Link"
    example:
      links:
      - rel: "rel"
        name: "name"
        documentationHref: "documentationHref"
        href: "href"
      - rel: "rel"
        name: "name"
        documentationHref: "documentationHref"
        href: "href"
  body:
    type: "object"
    properties:
      fields:
        type: "array"
        description: "Define which fields need to be returned. Default value is ALL"
        items:
          type: "string"
          default: "ALL"
          enum:
          - "ALL"
          - "class"
          - "schema"
          - "id"
          - "creationTimeUnix"
      things:
        type: "array"
        items:
          $ref: "#/definitions/Thing"
  body_1:
    type: "object"
    properties:
      fields:
        type: "array"
        description: "Define which fields need to be returned. Default value is ALL"
        items:
          type: "string"
          default: "ALL"
          enum:
          - "ALL"
          - "class"
          - "schema"
          - "id"
          - "creationTimeUnix"
      actions:
        type: "array"
        items:
          $ref: "#/definitions/Action"
  inline_response_200_1:
    type: "object"
    properties:
      things:
        $ref: "#/definitions/Schema"
      actions:
        $ref: "#/definitions/Schema"
    example:
      things:
        classes:
        - keywords: ""
          description: "description"
          vectorizeClassName: true
          class: "class"
          properties:
          - keywords: ""
            dataType:
            - "dataType"
            - "dataType"
            name: "name"
            description: "description"
            vectorizePropertyName: true
            index: true
            cardinality: "cardinality"
          - keywords: ""
            dataType:
            - "dataType"
            - "dataType"
            name: "name"
            description: "description"
            vectorizePropertyName: true
            index: true
            cardinality: "cardinality"
        - keywords: ""
          description: "description"
          vectorizeClassName: true
          class: "class"
          properties:
          - keywords: ""
            dataType:
            - "dataType"
            - "dataType"
            name: "name"
            description: "description"
            vectorizePropertyName: true
            index: true
            cardinality: "cardinality"
          - keywords: ""
            dataType:
            - "dataType"
            - "dataType"
            name: "name"
            description: "description"
            vectorizePropertyName: true
            index: true
            cardinality: "cardinality"
        name: "name"
        type: "thing"
        maintainer: "maintainer"
      actions:
        classes:
        - keywords: ""
          description: "description"
          vectorizeClassName: true
          class: "class"
          properties:
          - keywords: ""
            dataType:
            - "dataType"
            - "dataType"
            name: "name"
            description: "description"
            vectorizePropertyName: true
            index: true
            cardinality: "cardinality"
          - keywords: ""
            dataType:
            - "dataType"
            - "dataType"
            name: "name"
            description: "description"
            vectorizePropertyName: true
            index: true
            cardinality: "cardinality"
        - keywords: ""
          description: "description"
          vectorizeClassName: true
          class: "class"
          properties:
          - keywords: ""
            dataType:
            - "dataType"
            - "dataType"
            name: "name"
            description: "description"
            vectorizePropertyName: true
            index: true
            cardinality: "cardinality"
          - keywords: ""
            dataType:
            - "dataType"
            - "dataType"
            name: "name"
            description: "description"
            vectorizePropertyName: true
            index: true
            cardinality: "cardinality"
        name: "name"
        type: "thing"
        maintainer: "maintainer"
  corpus:
    type: "object"
    properties:
      corpus:
        type: "string"
        example: "In certain latitudes there comes a span of time approaching and\
          \ following the summer solstice, some weeks in all, when the twilights turn\
          \ long and blue."
    description: "The text corpus."
  inline_response_200_2:
    type: "object"
    properties:
      href:
        type: "string"
        description: "The Location to redirect to"
      clientId:
        type: "string"
        description: "OAuth Client ID"
    example:
      clientId: "clientId"
      href: "href"
  ActionsGetResponse_result:
    type: "object"
    properties:
      status:
        type: "string"
        default: "SUCCESS"
        enum:
        - "SUCCESS"
        - "PENDING"
        - "FAILED"
      errors:
        $ref: "#/definitions/ErrorResponse"
    description: "Results for this specific Action."
  C11yWordsResponse_concatenatedWord:
    type: "object"
    properties:
      concatenatedWord:
        type: "string"
      singleWords:
        type: "array"
        items:
          format: "string"
      concatenatedVector:
        $ref: "#/definitions/C11yVector"
      concatenatedNearestNeighbors:
        $ref: "#/definitions/C11yNearestNeighbors"
    description: "Weighted results for all words"
    example:
      concatenatedNearestNeighbors: ""
      singleWords:
      - ""
      - ""
      concatenatedVector: ""
      concatenatedWord: "concatenatedWord"
  C11yWordsResponse_info:
    type: "object"
    properties:
      vector:
        $ref: "#/definitions/C11yVector"
      nearestNeighbors:
        $ref: "#/definitions/C11yNearestNeighbors"
    example:
      nearestNeighbors: ""
      vector: ""
  C11yWordsResponse_individualWords:
    type: "object"
    properties:
      word:
        type: "string"
      inC11y:
        type: "boolean"
      info:
        $ref: "#/definitions/C11yWordsResponse_info"
    example:
      inC11y: true
      word: "word"
      info:
        nearestNeighbors: ""
        vector: ""
  C11yNearestNeighbors_inner:
    type: "object"
    properties:
      word:
        type: "string"
      distance:
        type: "number"
        format: "float"
  C11yVectorBasedQuestion_inner_classProps:
    type: "object"
    properties:
      propsVectors:
        type: "array"
        items:
          type: "number"
          format: "float"
      value:
        type: "string"
        description: "String with valuename."
  C11yVectorBasedQuestion_inner:
    type: "object"
    properties:
      classVectors:
        type: "array"
        description: "Vectorized classname."
        items:
          type: "number"
          format: "float"
        maxItems: 300
        minItems: 300
      classProps:
        type: "array"
        description: "Vectorized properties."
        items:
          $ref: "#/definitions/C11yVectorBasedQuestion_inner_classProps"
        maxItems: 300
        minItems: 300
  ErrorResponse_error:
    type: "object"
    properties:
      message:
        type: "string"
  GraphQLError_locations:
    type: "object"
    properties:
      column:
        type: "integer"
        format: "int64"
      line:
        type: "integer"
        format: "int64"
    example:
      line: 6
      column: 0
  Keywords_inner:
    type: "object"
    properties:
      keyword:
        type: "string"
      weight:
        type: "number"
        format: "float"
  BatchReferenceResponse_result:
    type: "object"
    properties:
      status:
        type: "string"
        default: "SUCCESS"
        enum:
        - "SUCCESS"
        - "PENDING"
        - "FAILED"
      errors:
        $ref: "#/definitions/ErrorResponse"
    description: "Results for this specific reference."
  ThingsGetResponse_result:
    type: "object"
    properties:
      status:
        type: "string"
        default: "SUCCESS"
        enum:
        - "SUCCESS"
        - "PENDING"
        - "FAILED"
      errors:
        $ref: "#/definitions/ErrorResponse"
    description: "Results for this specific Thing."
  WhereFilterGeoRange_distance:
    type: "object"
    properties:
      max:
        type: "number"
        format: "float64"
    example:
      max: 1.46581298050294517310021547018550336360931396484375
parameters:
  CommonLimitParameterQuery:
    name: "limit"
    in: "query"
    description: "The maximum number of items to be returned per page. Default value\
      \ is set in Weaviate config."
    required: false
    type: "integer"
    format: "int64"
    x-exportParamName: "Limit"
    x-optionalDataType: "Int64"
  CommonMetaParameterQuery:
    name: "meta"
    in: "query"
    description: "Should additional meta information (e.g. about classified properties)\
      \ be included? Defaults to false."
    required: false
    type: "boolean"
    x-exportParamName: "Meta"
    x-optionalDataType: "Bool"
  CommonIncludeParameterQuery:
    name: "include"
    in: "query"
    description: "Include additional information, such as classification infos. Allowed\
      \ values include: classification, _classification, vector, _vector, interpretation,\
      \ _interpretation"
    required: false
    type: "string"
    x-exportParamName: "Include"
    x-optionalDataType: "String"
externalDocs:
  url: "https://github.com/semi-technologies/weaviate"
